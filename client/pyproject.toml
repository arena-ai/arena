[tool.poetry]
name = "arena-client"
version = "0.1.0"
description = "A client to use arena AI"
authors = ["Nicolas Grislain <ng@sarus.tech>"]
license = "Apache-2"
readme = "README.md"
packages = [{from = "src", include = "arena"}]

[tool.poetry.dependencies]
python = "^3.11"
httpx = "^0.25"
openai = "^1.23"
anthropic = "^0.21"
mistralai = "^0.1"
anyio = {extras = ["trio"], version = "^4.3.0"}

[tool.poetry.group.dev.dependencies]
mypy = "^1.10.0"
pytest = "^8.1.1"
ruff = "^0.2.2"
python-dotenv = "^1.0.1"
rich = "^13.7.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-vv"
pythonpath = ["src"]
