# Redis StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{.Release.Name}}-redis
  namespace: {{.Values.namespace}}
  labels:
    app.kubernetes.io/instance: {{.Release.Name}}
    app.kubernetes.io/name: {{.Chart.Name}}
    app.kubernetes.io/version: {{.Chart.AppVersion}}
    app.kubernetes.io/managed-by: {{.Release.Service}}
    app.kubernetes.io/component: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{.Release.Name}}
      app.kubernetes.io/name: {{.Chart.Name}}
      app.kubernetes.io/component: redis
  serviceName: {{.Release.Name}}-redis-headless-service
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: {{.Release.Name}}
        app.kubernetes.io/name: {{.Chart.Name}}
        app.kubernetes.io/version: {{.Chart.AppVersion}}
        app.kubernetes.io/managed-by: {{.Release.Service}}
        app.kubernetes.io/component: redis
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: 560c33ff34d845009b51830c332aa05fa211444d1877d3526d3599be7543aaa5
        checksum/secret: 92de93ce8530c21993a93cc75ad32fd882569756503d74d82b30a642138d6417
    spec:
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: {{.Release.Name}}-redis-service-account
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: {{.Release.Name}}
                    app.kubernetes.io/name: {{.Chart.Name}}
                    app.kubernetes.io/component: redis
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: {{.Values.redis.image}}
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: null
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /usr/local/lib/start-scripts/start-master.sh
          env:
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{.Release.Name}}-redis-secret
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          volumeMounts:
            - name: start-scripts
              mountPath: /usr/local/lib/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /usr/local/etc/
      volumes:
        - name: start-scripts
          configMap:
            name: {{.Release.Name}}-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: {{.Release.Name}}-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: {{.Release.Name}}-redis-configuration
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: redis-data
        labels:
          app.kubernetes.io/instance: {{.Release.Name}}
          app.kubernetes.io/name: {{.Chart.Name}}
          app.kubernetes.io/component: redis
      spec:
        accessModes:
          - "ReadWriteOnce"
        storageClassName: arena-storageclass
        resources:
          requests:
            storage: "8Gi"
