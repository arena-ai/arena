namespace: default

docker:
  registry: ghcr.io/arena-ai
  requireAuthentication: false
  username: arena
  password: ""

gitlab:
  registry: registry.gitlab.com
  requireAuthentication: true
  username: arena
  password: ""

# Cluster configuration
cluster:
  provider: AKS # AKS | EKS | GKE
  ingress: nginx
  host: arena.sarus.app
  CIDR: 176.147.136.160, 195.154.25.38/24, 80.12.92.69
  tls:
    enabled: true
    issuer:
      name: letsencrypt-prod # letsencrypt-staging | letsencrypt-prod
      server: https://acme-v02.api.letsencrypt.org/directory # https://acme-staging-v02.api.letsencrypt.org/directory | https://acme-v02.api.letsencrypt.org/directory
      email: arena@sarus.app
      privateKeySecretRef: letsencrypt-prod # letsencrypt-staging | letsencrypt-prod
    secretName: letsencrypt-secret

# PostgreSQL configuration
postgresql:
  image: postgres
  user: postgres
  password: ""
  volume: "5Gi"
  db: app

# Redis configuration
redis:
  image: redis
  password: ""
  volume: "5Gi"

# Backend configuration
backend:
  image: arena_backend
  tag: main
  service:
    type: ClusterIP
    externalPort: 80
    internalPort: 80
    name: http
  firstSuperUser:
    user: ""
    password: ""
  usersOpenRegistration: false
  smtp:
    host: smtp-relay.gmail.com
    requireAuthentication: False
    user: arena@sarus.app
    password: ""
  emailsFromEmail: arena@sarus.app
  emailsFromName: "Sarus Arena"

# Worker configuration
worker:
  image: arena_backend
  tag: main
  service:
    type: ClusterIP

# Frontend configuration
frontend:
  image: arena_frontend
  tag: main
  service:
    type: ClusterIP
    externalPort: 80
    internalPort: 80
    name: http

# Ingress values (see: https://github.com/kubernetes/ingress-nginx/blob/main/charts/ingress-nginx/values.yaml)
ingress-nginx:
  # namespaceOverride: sarus
  controller:
    replicaCount: 2
    publishService:
      enabled: true
    nodeSelector:
      kubernetes.io/os: linux
    defaultBackend:
      nodeSelector:
        kubernetes.io/os: linux
    admissionWebhooks:
      patch:
        nodeSelector:
          kubernetes.io/os: linux
    service:
      externalTrafficPolicy: Local
      loadBalancerIP: ""
    config:
      proxy-body-size: "1000m"
      proxy-connect-timeout: 1200
      proxy-send-timeout: 1200
      proxy-read-timeout: 1200

cert-manager: #defined by either the name or alias of your dependency in Chart.yaml
  namespace: default

# Presidio
masking:
  presidio:
    registry: mcr.microsoft.com
    # The text analyzer
    analyzer:
      image: presidio-analyzer
      tag: latest
      replicas: 1
      # imagePullPolicy: Always
      container:
        resources:
          requests:
            memory: "1500Mi"
            cpu: "1500m"
          limits:
            memory: "3000Mi"
            cpu: "2000m"
      service:
        type: ClusterIP
        externalPort: 80
        internalPort: 5001
        name: http
    # The text anonymizer
    anonymizer:
      image: presidio-anonymizer
      tag: latest
      replicas: 1
      # imagePullPolicy: Always
      container:
        resources:
          requests:
            memory: "128Mi"
            cpu: "125m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      service:
        type: ClusterIP
        externalPort: 80
        internalPort: 5001
        name: http

# Qdrant
qdrant:
  persistence:
    accessModes: ["ReadWriteOnce"]
    size: 5Gi
    annotations: {}
    storageVolumeName: qdrant-data
    # storageClassName: arena-storageclass

# Milvus
milvus:
  minio:
    persistence:
      # storageClass: arena-storageclass
      size: 5Gi
  etcd:
    persistence:
      # storageClass: arena-storageclass
      size: 2Gi
  pulsar:
    bookkeeper:
      volumes:
        journal:
          size: 2Gi
        ledgers:
          size: 5Gi
      pdb:
        usePolicy: false
    zookeeper:
      pdb:
        usePolicy: false
    proxy:
      pdb:
        usePolicy: false
    broker:
      pdb:
        usePolicy: false
  # Kafka not enabled
  kafka:
    persistence:
      # storageClass: arena-storageclass
      size: 2Gi
  # In cluster mode use this (see: https://artifacthub.io/packages/helm/milvus-helm/milvus#deploy-milvus-with-cluster-mode)
  mixCoordinator:
    enabled: false
  rootCoordinator:
    enabled: true
  indexCoordinator:
    enabled: true
  queryCoordinator:
    enabled: true
  dataCoordinator:
    enabled: true